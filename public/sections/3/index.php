<p align="justify"> <strong>Autor: </strong> Rogério Júnior </p>
<p align="justify"> <strong>Fonte: </strong> <a href="noic.com.br">Noic</a> </p>

<h1> 1.3 - Estruturas de Repetição</h1>

<p align="justify">Vamos falar agora do <strong>for</strong>. Para começar, ele é um loop, ou seja, ele condiciona a repetição de um comando enquanto determinada condição for verdadeira. O loop mais simples é o <strong>while</strong>. Sua gramática é "<strong>while(condição) { faça isso }</strong>", ou seja, enquanto a condição for verdadeira, faça o que estiver entre as chaves. Assim como o <strong>if</strong>, ele não precisa de de <strong>;</strong> ao fim das chaves e, se entre as chaves houver um único comando, elas não são necessárias. Nos loops, é comum o uso dos operadores <strong>+=</strong>, -=, ++ e --. Se escrevemos "<strong>a+=b</strong>", então adicionamos em <strong>a</strong> o valor de <strong>b</strong>. É semelhante ao comando "<strong>a=a+b</strong>". Analogamente, "<strong>a</strong>-=<strong>b</strong>" subtrai da variável <strong>a</strong> o valor de <strong>b</strong>. O comando "<strong>a++</strong>" adiciona 1 ao valor de <strong>a</strong> e "<strong>a--</strong>" subtrai 1 ao seu valor. Veja, por exemplo, um código que imprime todos de 1 até 10 em uma única linha, separados um a um por um espaço em braco e uma quebra de linha ao final do programa:</p>
<style>.gist table { margin-bottom: 0; }</style>
<p align="justify"><script src="https://gist.github.com/rogerioagjr/f75aeefc3897efbf1921.js"></script></p>
<p align="justify">Veja que a cada repetição do loop, o programa imprime o valor de <strong>n</strong> e adiciona 1 ao seu valor. Após 10 repetições, seu valor será 11, e, quando no começo do loop, a condição for checada, ela será falsa e o loop acabará. Vale lembrar que o <strong>while </strong>checa a condição apenas no começo do loop, ou seja, ele não acaba assim que a condição se torna falsa, mas apenas no momento em que ele recomeça com a condição falsa.</p>
<p align="justify">Vale lembrar que o <span class='MathJax_Preview'><img src='http://noic.com.br/wp-content/plugins/latex/cache/tex_3c9cf3cb81e387378749420641299ee6.gif' style='vertical-align: middle; border: none; ' class='tex' alt="scanf" /></span><script type='math/tex'>scanf</script> retorna "EOF" se for chamado e não houver mais nada para ser lido, ou seja, para ler um inteiro, salvá-lo em <strong>x </strong>e executar uma série de comandos até que não haja mais números na entrada, devemos escrever "<strong>while(scanf("%d", &amp;x)!=EOF){ série de comandos }</strong>".</p>
<p align="justify">O <strong>for</strong> serve para simplificar o uso de um loop. O comando "<strong>for(comando_inicio; condição; comando_fim){ todos_os_comandos; }</strong>" equivale a:</p>
<style>.gist table { margin-bottom: 0; }</style>
<p align="justify"><script src="https://gist.github.com/rogerioagjr/99cbafb2e7540c0f03d4.js"></script></p>
<p align="justify">Ou seja, o primeiro parâmetro do <strong>for</strong> (<strong>comando_inicio</strong>) é um comando realizado antes e fora do loop. Este loop será realizado enquanto o segundo parâmetro (<strong>condição</strong>) for verdade. O loop envolverá a repetição do que houver entre as chaves (<strong> todos_os_comandos;</strong>) seguido do terceiro parâmetro (<strong>comando_fim</strong>). Veja como imprimir os números de 1 a 10 novamente, mas agora usando o <strong>for</strong>:</p>
<style>.gist table { margin-bottom: 0; }</style>
<p align="justify"><script src="https://gist.github.com/rogerioagjr/cf142448db74216b6bc0.js"></script></p>
<p align="justify">Um uso comum do loop é ler um entrada de quando só conhecemos seu tamanho após lê-la. Façamos, por exemplo, um programa que imprime a soma de <strong>n </strong>números. A entrada (o que será lido na tela) terá na primeira linha o valor de <strong>n</strong>, que é a quantidade de números a serem somados e, na segunda linha estarão os <strong>n</strong> números inteiros. A saída (o que o programa deve imprimir) deve ser a soma dos <strong>n</strong> números. Para isso, vamos declarar uma variável <span class='MathJax_Preview'><img src='http://noic.com.br/wp-content/plugins/latex/cache/tex_15a00ab33070d69d3ec3f03a9222034b.gif' style='vertical-align: middle; border: none; padding-bottom:2px;' class='tex' alt="soma" /></span><script type='math/tex'>soma</script> que começará com o valor zero. Depois vamos ler o valor de <strong>n</strong>, e faremos um loop que irá declarar um variável <span class='MathJax_Preview'><img src='http://noic.com.br/wp-content/plugins/latex/cache/tex_865c0c0b4ab0e063e5caa3387c1a8741.gif' style='vertical-align: middle; border: none; padding-bottom:1px;' class='tex' alt="i" /></span><script type='math/tex'>i</script> começando com o valor 1 e, a cada repetição, vamos adicionar 1 a seu valor. O loop deverá se repetir enquanto <span class='MathJax_Preview'><img src='http://noic.com.br/wp-content/plugins/latex/cache/tex_865c0c0b4ab0e063e5caa3387c1a8741.gif' style='vertical-align: middle; border: none; padding-bottom:1px;' class='tex' alt="i" /></span><script type='math/tex'>i</script> for menor ou igual a <strong>n</strong> apenas para contarmos quantos números vamos ler. Dentro do loop vamos declarar uma variável inteira <span class='MathJax_Preview'><img src='http://noic.com.br/wp-content/plugins/latex/cache/tex_7e746bd54a55b625a85453db6be89ebf.gif' style='vertical-align: middle; border: none; padding-bottom:1px;' class='tex' alt="davez" /></span><script type='math/tex'>davez</script>. Iremos ler um número inteiro e salvá-lo em <span class='MathJax_Preview'><img src='http://noic.com.br/wp-content/plugins/latex/cache/tex_7e746bd54a55b625a85453db6be89ebf.gif' style='vertical-align: middle; border: none; padding-bottom:1px;' class='tex' alt="davez" /></span><script type='math/tex'>davez</script>. Feito isso, somaremos o valor de <span class='MathJax_Preview'><img src='http://noic.com.br/wp-content/plugins/latex/cache/tex_7e746bd54a55b625a85453db6be89ebf.gif' style='vertical-align: middle; border: none; padding-bottom:1px;' class='tex' alt="davez" /></span><script type='math/tex'>davez</script> ao valor de soma. Assim, iremos ter feito o processo de ler o valor de um número e somá-lo a <span class='MathJax_Preview'><img src='http://noic.com.br/wp-content/plugins/latex/cache/tex_15a00ab33070d69d3ec3f03a9222034b.gif' style='vertical-align: middle; border: none; padding-bottom:2px;' class='tex' alt="soma" /></span><script type='math/tex'>soma</script>, exatamente <strong>n</strong> vezes, que é o número de inteiros na entrada! Ao final do loop, iremos ter somado os <strong>n</strong> números a <span class='MathJax_Preview'><img src='http://noic.com.br/wp-content/plugins/latex/cache/tex_15a00ab33070d69d3ec3f03a9222034b.gif' style='vertical-align: middle; border: none; padding-bottom:2px;' class='tex' alt="soma" /></span><script type='math/tex'>soma</script> e basta que imprimamos o seu valor, seguido da quebra de linha. Vamos ao código:</p>
<style>.gist table { margin-bottom: 0; }</style>
<p align="justify"><script src="https://gist.github.com/rogerioagjr/99aa90f7cb1c59299ab8.js"></script></p>
<p align="justify">Se a entrada for, por exemplo:</p>
<p align="justify">5</p>
<p align="justify">11 2 7 15 -2</p>
<p align="justify">O programa deve gerar um única linha, a soma dos cinco números:</p>
<p align="justify">33</p>
<br/ >
<p align="justify">Vamos juntar o <strong>if </strong>e o <strong>for </strong>e escrever um programa que, dados <strong>n </strong>números, soma todos os que são maiores que dez. Basta repetir o código anterior, mas agora, no lugar da linha "<strong>soma+=davez;</strong>", iremos apenas somar o valor de <span class='MathJax_Preview'><img src='http://noic.com.br/wp-content/plugins/latex/cache/tex_7e746bd54a55b625a85453db6be89ebf.gif' style='vertical-align: middle; border: none; padding-bottom:1px;' class='tex' alt="davez" /></span><script type='math/tex'>davez</script> a <span class='MathJax_Preview'><img src='http://noic.com.br/wp-content/plugins/latex/cache/tex_15a00ab33070d69d3ec3f03a9222034b.gif' style='vertical-align: middle; border: none; padding-bottom:2px;' class='tex' alt="soma" /></span><script type='math/tex'>soma</script> se <span class='MathJax_Preview'><img src='http://noic.com.br/wp-content/plugins/latex/cache/tex_7e746bd54a55b625a85453db6be89ebf.gif' style='vertical-align: middle; border: none; padding-bottom:1px;' class='tex' alt="davez" /></span><script type='math/tex'>davez</script> for maior que dez, escrevendo portanto a linha "<strong>if(davez&gt;10) soma+=davez;</strong>". O código ficaria assim:</p>
<style>.gist table { margin-bottom: 0; }</style>
<p align="justify"><script src="https://gist.github.com/rogerioagjr/956a6606502e17256828.js"></script></p>
<p align="justify">Observe que, agora, na mesma entrada anterior:</p>
<p align="justify">5</p>
<p align="justify">11 2 7 15 -2</p>
<p align="justify">o programa deverá gerar uma única linha com a soma dos números que são maiores que 10, que são 11 e 15:</p>
<p align="justify">26</p>
<br />
<p align="justify">Vale lembrar dois comando muito importantes que podemos usar em um loop: <strong>break </strong>e <strong>continue.</strong> O primeiro significa, quebra, e é usado para para um loop. Se escrevemos o comando "<strong>break;</strong>" o programa irá parar imediatamente o loop em que o break foi escrito. Se abrimos dois loops e, dentro do segundo, mandamos o programa dar <strong>break</strong>, apenas o segundo loop será encerrado. O <strong>continue </strong>é semelhante ao <strong>break</strong>, mas em vez de fechar o loop, ele apenas pula para o próximo passo, ou seja, se chamarmos o comando "<strong>continue;</strong>" ele vai para a próxima repetição no momento em que o comando é executado, ignorando, naquela repetição, o resto do loop e já indo direto para a próxima.</p>
<p align="justify">Vamos lembrar apenas alguns operadores matemáticos para resolver problemas:</p>
<p align="justify">"<strong>a/b</strong>" - <strong>a </strong>dividido por <strong>b</strong>. Se <strong>a</strong> e <strong>b </strong>forem inteiros, será o valor do piso da divisão, ou seja, 7/2 é 3.5, mas como 7 e 2 são inteiros 7/2 seria igual a 3 em C++. Se fosse 7.0/2, então 7.0 não é inteiro, é uma double, e 7.0/2 seria 3.5.</p>
<br />
<p align="justify">"<strong>a*b</strong>" - <strong>a</strong> multiplicado por <strong>b</strong>.</p>
<p align="justify">"<strong>a%b</strong>" - o resto que <strong>a</strong> deixa na divisão por <strong>b</strong>. 7%3 é 1, pois 7 dividido por 3 é dois e deixa resto 1, e 6%3 é zero, pois 6 dividido por 3 é 2 e deixa resto 0. Vale lembrar que um número <strong>a</strong> só é múltiplo de <strong>b</strong> se o resto da divisão de <strong>a</strong> por <strong>b </strong>for zero, ou seja, se <strong>a%b==0</strong>.</p>

